<?php
/**
 *  @author Robin ZoÅˆ <zon@itart.cz>
 *  @package library/models
 * 
 *	@property int		$id
 *	@property int		$user_number	User number generated by system
 *	@property int		$id_currency
 *	@property int		$active
 *	@property int		$created_by
 *	@property int		$modified_by
 *	@property string	$created_date
 *	@property string	$modified_date
 * 
 *	@method Art_Model_User_Data		getData()
 *	@method Art_Model_Currency		getCurrency()
 *	@method Art_Model_Address[]		getAddresses()
 *	@method Art_Model_Login[]		getLogins()
 *	@method Art_Model_User_X_User_Group[]	getGroups()
 *	@method \Art_Model_User			setData(Art_Model_User_Data $user_data)
 *	@method \Art_Model_User			setCurrency(Art_Model_Currency $currency)
 *	@method \Art_Model_User			setAddresses(array $addresses)
 *	@method \Art_Model_User			pushAddresses(Art_Model_Address $address)
 *	@method \Art_Model_User			removeFromAddresses(Art_Model_Address $address)
 *	@method \Art_Model_User			setLogins(array $logins)
 *	@method \Art_Model_User			pushLogins(Art_Model_Login $login)
 *	@method \Art_Model_User			removeFromLogins(Art_Model_Login $login)
 *	@method \Art_Model_User			setGroups(array $groups)
 *	@method \Art_Model_User			pushGroups(Art_Model_User_X_User_Group $group)
 *	@method \Art_Model_User			removeFromGroups(Art_Model_User_X_User_Group $group)
 */
class Art_Model_User extends Art_Abstract_Model_DB {
	
	// protected static $_caching = false;
	
	protected static $_table = 'user';
    
	protected static $_foreign = array('id_currency');
	
	protected static $_link = array('data' => 'Art_Model_User_Data', 'currency' => 'Art_Model_Currency');
	
	protected static $_fetch = array('addresses' => 'Art_Model_Address', 'groups' => 'Art_Model_User_X_User_Group', 'logins' => 'Art_Model_Login');
	
    protected static $_cols = array('id'			=>	array('select','insert'),
                                    'user_number'	=>	array('select','insert','update'),
                                    'id_currency'	=>	array('select','insert','update'),
									'active'		=>	array('select','insert','update'),
									'created_by'	=>	array('select','insert'),
									'modified_by'	=>	array('select','update'),
									'created_date'	=>	array('select'),
									'modified_date'	=>	array('select'));	
	
	/**
	 *	Override get method 
	 * 
	 *	@param string $name
	 *	@return string
	 */
	function __get($name) {
		switch($name) {
			case 'fullname' :
				return static::getFullname($this);
			default:
				return $this->{$name};
		}
	}
	
	protected $_rights_cache;
	
	/**
	 *	List of read allowed modules
	 * 
	 *	@var array
	 */
	protected $_allowed = NULL;
	
	/**	List of allowed actions */
	const ALLOWED_ACTIONS = array('read', 'add', 'update', 'delete');
	
	
    /**
     *  True if user has privileges compared to param
	 * 
     *  @static
     *  @param object $object Rights value or object to compare with user's one
     *  @return bool True if user has privileges
     *  @example User::hasPrivileges({testModule})
     */
    function hasPrivileges($object) {
        if (is_numeric($object)) {
			// p($object);
			// p($this->getRights());
            return $this->getRights() >= $object;
		} else {
            if (method_exists($object, 'getRights')) {
                return $this->getRights() >= $object->getRights();
            } else {
                trigger_error('Object '.var_dump_str($object).' has no ->getRights() method',E_USER_ERROR);
                return false;
            }
        }
    }	
	
	
	/**
	 *	Returns true if user is allowed to do action in module
	 * 
	 *	@param string $action
	 *	@param string $module_type_name
	 *	@return boolean
	 */
	function _allowed( $action, $module_type_name )
	{
		//If rights were not loaded yet
		if( NULL === $this->_allowed )
		{
			$this->_allowed = $this->_getUserModulesRights();
		}		
		
		//If action is found
		if( isset($this->_allowed[$action]) )
		{
			//If module is specified for this action
			if( isset($this->_allowed[$action][$module_type_name]) )
			{
				return $this->_allowed[$action][$module_type_name];
			}
			else
			{
				//Return true by default
				return true;
			}
		}
		else
		{
			trigger_error('Unknown action '.$action, E_USER_ERROR);
		}
	}
	
	
	/**
	 *	Get user modules rights (read, write, delete)
	 * 
	 *	@return array
	 */
	function _getUserModulesRights()
	{		
		//Get all modules names
		$module_names = Art_Model_Module_Type::getNamesSimple();
		
		//Prepare array
		$output = array();
		foreach( static::ALLOWED_ACTIONS AS $allowed_action )
		{
			$output[$allowed_action] = array();
		}
		
		//Get user groups
		$user_groups = $this->getGroups();
				
		//For each group
		foreach($user_groups AS $user_group)
		{			
			//Find all rights specifications
			$module_types = Art_Model_User_Group_X_Module_Type::fetchAll(array('id_user_group' => $user_group->id_user_group));
			
			//For each spec
			foreach( $module_types AS $module_type )/* @var $module_type Art_Model_User_Group_X_Module_Type */
			{
				if( isset($module_names[$module_type->id_module_type]) )
				{
					//For each action
					foreach( static::ALLOWED_ACTIONS AS $allowed_action )
					{
						//If action was not specified yet, or if was not allowed before
						if( !isset($output[$allowed_action][$module_names[$module_type->id_module_type]]) || 
							( !$output[$allowed_action][$module_names[$module_type->id_module_type]] && $module_type->{$allowed_action.'_allowed'} ))
						{
							$output[$allowed_action][$module_names[$module_type->id_module_type]] = (bool)$module_type->{$allowed_action.'_allowed'};
						}
					}
				}
			}
		}
		
		return $output;
	}
	
	
	/**
	 *	Returns true if user is allowed to read in module
	 * 
	 *	@param string $module_type
	 *	@return boolean
	 */
	function readAllowed( $module_type )
	{		
		return $this->_allowed('read', $module_type);
	}
	
	
	/**
	 *	Returns true if user is allowed to add in module
	 * 
	 *	@param string $module_type
	 *	@return boolean
	 */
	function addAllowed( $module_type )
	{
		return $this->_allowed('add', $module_type);
	}
	
	
	/**
	 *	Returns true if user is allowed to update in module
	 * 
	 *	@param string $module_type
	 *	@return boolean
	 */
	function updateAllowed( $module_type )
	{
		return $this->_allowed('update', $module_type);
	}
	
	
	/**
	 *	Returns true if user is allowed to delete in module
	 * 
	 *	@param string $module_type
	 *	@return boolean
	 */
	function deleteAllowed( $module_type )
	{
		return $this->_allowed('delete', $module_type);
	}
	
	
	/**
     *  Get fullname - concatenated name with surname
	 * 
     *  @static
     *  @param Art_Model_User $user
     *  @return string
     */
    static function getFullname ( $user )
    {
		$fullname = '';
		
		if ( $user->isLoaded() )
		{
			$fullname = Art_Model_User_Data::getFullname($user->getData());
		}
		
		return $fullname;
	}
}